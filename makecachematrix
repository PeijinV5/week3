makeCacheMatrix <- function(x = matrix()) {
        Inv <- NULL ## initialize inverse
        
        ## set x in parent env with the desired value, if inverse is already set, get rid of it!
        set <- function(y = matrix()) {
                x <<- y 
                Inv <<- NULL
        }
        
        get <- function() x
        
        ##set inverse variable in parent env to desired value and return the value as a convenience
        setInverse <- function(z) {
                Inv <<- z 
                return(Inv)
        }
        
        getInverse  <- function() Inv
        list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}


## given the list variable from the first function, will first check to see if there's already a cached inverse and return
## otherwise will attempt to solve its inverse and set/return it

cacheSolve <- function(x=makeCacheMatrix(1:6, nrow=2, ncol=3), ...) {
        
        ## let's see if there's something there already
        calculatedInv <- x$getInverse() 
        
        ##check if there's a cached value AND it's a matrix
        if(!is.null(calculatedInv) && is.matrix(calculatedInv)) { 
                message("The data is in cache!")
                return(calculatedInv)
        }
        
        ## otherwise get the matrix
        matrixToSolve <- x$get()  
        
        ## try to solve the matrix and catch errors and warnings
        calculatedInv <- tryCatch({ 
                solve(matrixToSolve)
        }, warning=function(w) {
                message("This may not be the result you're looking for")
                message(w)
        }, error=function(e) {
                message("Something went wrong solving your matrix")
                message(e)
               })
        
        ## whatever the case, set the value of the inverse (NULL if something went wrong)
        message("Set the value of inverse matrix to:") 
        x$setInverse(calculatedInv)
}
